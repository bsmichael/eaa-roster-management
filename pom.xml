<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>io.github.bsmichael</groupId>
  <artifactId>eaa-roster-management</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>
 
  <name>EAA Roster Management</name>
  <description>Library to assist in programmatically interacting with EAA's Roster Management system</description>
  <url>https://github.com/bsmichael</url>

  <properties>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
  </properties>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <developers>
    <developer>
      <name>Brian Michael</name>
      <email>bsmichael@gmail.com</email>
      <organization>Starfire Aviation</organization>
      <organizationUrl>https://github.com/bsmichael</organizationUrl>
    </developer>
  </developers>
 
  <scm>
    <connection>scm:git:git@github.com:bsmichael/eaa-roster-management.git</connection>
    <developerConnection>scm:git:git@github.com:bsmichael/eaa-roster-management.git</developerConnection>
    <url>https://github.com/bsmichael/eaa-roster-management</url>
  </scm>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>
  <dependencies>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
      <version>4.4</version>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>3.11.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.openclover</groupId>
      <artifactId>clover</artifactId>
      <version>4.4.1</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
      <version>1.14.2</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.github.javafaker</groupId>
      <artifactId>javafaker</artifactId>
      <version>1.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.20</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>
  <reporting>
    <excludeDefaults>true</excludeDefaults>
    <plugins>
      <plugin>
        <groupId>org.openclover</groupId>
        <artifactId>clover-maven-plugin</artifactId>
        <configuration>
          <!-- Verify that we can modify the location of the Clover database and that the directory is created if
               it doesn't exist. Note: we're putting the configuration here and not in the build section because the
               build section inherits from the reporting section but not the other way around... -->
          <!--cloverDatabase>${project.build.directory}/customclover/myclover.db</cloverDatabase-->

          <!-- Verify that we can generate all types of Clover reports -->
          <generateHtml>true</generateHtml>
          <generatePdf>true</generatePdf>
          <generateXml>true</generateXml>

          <!-- We ask the Clover plugin to generate a historical report but we don't have any historical data saved.
               This is to verify it doesn't error out when this is the case. -->
          <generateHistorical>true</generateHistorical>
          <!--useFullyQualifiedJavaLang>false</useFullyQualifiedJavaLang-->
        </configuration>
      </plugin>
    </plugins>
  </reporting>
  <profiles>
    <profile>
      <id>release-sign-artifacts</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>3.0.1</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
   <build>
     <plugins>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-compiler-plugin</artifactId>
         <version>3.8.1</version>
         <configuration>
           <source>11</source>
           <target>11</target>
         </configuration>
       </plugin>
       <plugin>
         <groupId>org.sonatype.plugins</groupId>
         <artifactId>nexus-staging-maven-plugin</artifactId>
         <version>1.6.8</version>
         <extensions>true</extensions>
         <configuration>
           <serverId>ossrh</serverId>
           <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
           <autoReleaseAfterClose>true</autoReleaseAfterClose>
         </configuration>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-source-plugin</artifactId>
         <version>3.2.1</version>
         <executions>
           <execution>
             <id>attach-sources</id>
             <goals>
               <goal>jar-no-fork</goal>
             </goals>
           </execution>
         </executions>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
         <version>3.3.0</version>
         <configuration>
           <source>11</source>
         </configuration>
         <executions>
           <execution>
             <id>attach-javadocs</id>
             <goals>
               <goal>jar</goal>
             </goals>
           </execution>
         </executions>
       </plugin>
       <plugin>
         <groupId>org.openclover</groupId>
         <artifactId>clover-maven-plugin</artifactId>
         <version>4.4.1</version>
         <configuration>
           <!--includesTestSourceRoots>false</includesTestSourceRoots-->
           <targetPercentage>87%</targetPercentage>
           <generatePdf>true</generatePdf>
           <generateHtml>true</generateHtml>
           <!-- Verify that we can specify the JDK version for Clover's instrumentation -->
           <jdk>1.9</jdk>
           <!-- Verify that we can exclude some files from the instrumentation. Make sure the file we are excluding
              is referenced by other classes to ensure excluding is only done at the Clover level -->
           <excludes>
             <exclude>**/*Test.java</exclude>
           </excludes>
         </configuration>
         <executions>
           <execution>
             <id>main</id>
             <phase>verify</phase>
             <goals>
               <goal>instrument</goal>
               <goal>check</goal>
             </goals>
           </execution>
           <execution>
             <id>site</id>
             <phase>pre-site</phase>
             <goals>
               <goal>instrument</goal>
             </goals>
           </execution>
         </executions>
       </plugin>
     </plugins>
   </build>
</project>
